name: ReleaseBranch

env:
  Solution: source/${{ github.event.repository.name }}.sln
  Configuration: Release
  DOTNET_NOLOGO: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  ENG_INS_SUBSCRIPTION_ID: 4e132d5c-b463-498b-a459-e8b5be5c5c63
  TENANT_ID: 8afe73f9-0d93-4821-a898-c5c2dc320953

on:
  push:
    branches: 'master'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.408

    - name: Build Documentation
      run: |
        Invoke-WebRequest https://github.com/dotnet/docfx/releases/download/v2.58/docfx.zip -OutFile docfx.zip
        Expand-Archive -Path .\docfx.zip -DestinationPath DocFx
        DocFx/docfx.exe source/Relativity.Testing.Framework.Documentation/docfx.json

    - name: Publish
      uses: peaceiris/actions-gh-pages@v3.7.3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: source/Relativity.Testing.Framework.Documentation/_site
        force_orphan: true

    - name: Set Version
      id: SetVersion
      run: |
        $VersionNumber = Get-Content "version.txt"
        $PackageVersion = $VersionNumber
        $FileVersion = "$($VersionNumber).${{ github.run_number }}"
        $AssemblyVersion = "$($VersionNumber).0"
        $InformationalVersion = "$($FileVersion) ${{ github.sha }}"

        Write-Output "::set-output name=VERSION::$PackageVersion"

        [xml]$Props = Get-Content "Directory.Build.props"
        $Props.Project.PropertyGroup.PackageVersion = $PackageVersion
        $Props.Project.PropertyGroup.FileVersion = $FileVersion
        $Props.Project.PropertyGroup.AssemblyVersion = $AssemblyVersion
        $Props.Project.PropertyGroup.InformationalVersion = $InformationalVersion

        $Props.Save("Directory.Build.props")

    - name: Compile
      run: dotnet build "${{ env.Solution }}" --configuration "${{ env.Configuration }}" --nologo

    - name: Test
      run: dotnet test "${{ env.Solution }}" --configuration "${{ env.Configuration }}" --nologo --no-build /p:collectcoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=../../Artifacts/Logs/coverage '--logger:nunit;LogFilePath="../../Artifacts/Logs/{assembly}.{framework}.TestResults.xml"' '--logger:trx;LogFileName="Relativity.Testing.Framework.Tests.NETFramework462.TestResults.trx"'

    - name: Upload Logs
      uses: actions/upload-artifact@v2
      if: success() || failure()
      with:
        name: Logs
        path: Artifacts/Logs/

    - name: Sign
      env:
        DirectoryId: ${{ secrets.DIRECTORYID }}
        ClientId: ${{ secrets.CLIENTID }}
        ClientSecret: ${{ secrets.CLIENTSECRET }}
      run: |
        $Body = @{
          grant_type = "client_credentials"
          client_id = "${{ env.ClientId }}"
          client_secret = "${{ env.CLIENTSECRET }}"
          scope = "https://vault.azure.net/.default"
        }

        $AccessToken = (Invoke-RestMethod -Method POST `
          -Uri "https://login.microsoftonline.com/${{ env.DirectoryId }}/oauth2/v2.0/token" `
          -Body $Body).access_token

        $CodeSigningCertificatePassword = (Invoke-RestMethod -Method GET `
          -Uri "https://testengineering-github.vault.azure.net/secrets/CodeSigningCertificatePassword?api-version=7.1" `
          -Headers @{ Authorization="Bearer $AccessToken" }).value

        $CodeSigningCertificateBase64String = (Invoke-RestMethod -Method GET `
          -Uri "https://testengineering-github.vault.azure.net/secrets/CodeSigningCertificate?api-version=7.1" `
          -Headers @{ Authorization="Bearer $AccessToken" }).value
        $CodeSigningCertificate = [System.Convert]::FromBase64String($CodeSigningCertificateBase64String)

        $Certificate = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($CodeSigningCertificate, $CodeSigningCertificatePassword, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::EphemeralKeySet)

        $Signature = Get-ChildItem .\source\Relativity.Testing.Framework\bin\ -recurse -Include Relativity.Testing.Framework.dll | `
          Set-AuthenticodeSignature -Certificate $Certificate -TimestampServer "http://timestamp.digicert.com"

        if (!($Signature.Status -eq "Valid") -and ($null -ne $Signature.TimeStamperCertificate))
        {
          $Signature | Format-List *
          Throw "Failed to sign, please see above for more details."
        }

    - name: Package
      run: dotnet pack "${{ env.Solution }}" --configuration "${{ env.Configuration }}" --nologo --no-build --include-symbols

    - name: Upload NuGet Packages
      uses: actions/upload-artifact@v2
      with:
        name: NuGetPackages
        path: Artifacts/NuGet/

    - name: Publish
      env:
        DirectoryId: ${{ secrets.DIRECTORYID }}
        ClientId: ${{ secrets.CLIENTID }}
        ClientSecret: ${{ secrets.CLIENTSECRET }}
      run: |
        $Body = @{
          grant_type = "client_credentials"
          client_id = "${{ env.ClientId }}"
          client_secret = "${{ env.CLIENTSECRET }}"
          scope = "https://vault.azure.net/.default"
        }

        $AccessToken = (Invoke-RestMethod -Method POST `
          -Uri "https://login.microsoftonline.com/${{ env.DirectoryId }}/oauth2/v2.0/token" `
          -Body $Body).access_token

        $NuGetApiKey = (Invoke-RestMethod -Method GET `
          -Uri "https://testengineering-github.vault.azure.net/secrets/RtfNugetApiKey?api-version=7.1" `
          -Headers @{ Authorization="Bearer $AccessToken" }).value

        $Package = (get-childitem ./Artifacts/NuGet).FullName
        dotnet nuget push $Package -k $NuGetApiKey -s "https://api.nuget.org/v3/index.json" -n true --skip-duplicate

    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.CLIENTID }}","clientSecret":"${{ secrets.CLIENTSECRET }}","subscriptionId":"${{ env.ENG_INS_SUBSCRIPTION_ID }}","tenantId":"${{ env.TENANT_ID }}"}'

    - name: Get Secrets from DevOpsMetricsKeyVault
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: "DevOpsMetricsKeyVault"
        secrets: "github-access-token"
      id: getSecretAction

    - name: Checkout GitHub Action Repo
      uses: actions/checkout@v2.3.4
      with:
        repository: relativityone/SendBuildEvent
        token: ${{ steps.getSecretAction.outputs.github-access-token }}
        path: .github/actions/private-actions

    - name: Get Secrets from TestEngineering-GitHub
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: "TestEngineering-GitHub"
        secrets: "OtelWebhookTokenForTestEngineering"
      id: getSecretAction2

    - name: Get Commit Time Stamp
      uses: actions/github-script@0.3.0
      id: getCommitTimeStamp
      with:
        github-token: ${{ steps.getSecretAction.outputs.github-access-token }}
        script: |
          const commit_details = await github.git.getCommit({owner: "${{ github.repository_owner }}", repo: "${{ github.event.repository.name }}", commit_sha: "${{ github.sha }}" });
          return commit_details.data.author.date

    - name: SendBuildEvent
      uses: relativityone/SendBuildEvent@main
      with:
        otel-token: ${{ steps.getSecretAction2.outputs.OtelWebhookTokenForTestEngineering }}
        build-status: ${{ job.status }}
        service-name: "devops-metrics-collector-repo"
        branch-name: ${{ github.ref_name }}
        commit-hash: ${{ github.sha }}
        commit-timestamp: ${{ steps.getCommitTimeStamp.outputs.result }}
        application-version: ${{ steps.SetVersion.outputs.VERSION }}

    - name: Create tag
      uses: actions/github-script@v4
      with:
        github-token: ${{ github.token }}
        script: |
          github.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: "refs/tags/${{ steps.SetVersion.outputs.VERSION }}",
            sha: context.sha
          })
